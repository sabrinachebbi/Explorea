security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
#                default_target_path: host_dashboard
                enable_csrf: true
            logout:
                path: app_logout
                # target: app_any_route  # uncomment this line and add a route if needed

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall
            # switch_user: true  # activate user impersonation if needed

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/host, roles: ROLE_HOST }
        - { path: ^/traveler, roles: ROLE_TRAVELER }
        - { path: ^/announcements, roles: IS_AUTHENTICATED_ANONYMOUSLY }

    role_hierarchy:
        ROLE_USER: IS_AUTHENTICATED_ANONYMOUSLY  # Les visiteurs peuvent voir les annonces sans interaction
        ROLE_TRAVELER: ROLE_USER  # Les voyageurs peuvent réserver et voir les annonces
        ROLE_HOST: ROLE_TRAVELER  # Les hôtes peuvent tout faire : réserver et publier des annonces
        ROLE_ADMIN: [ ROLE_HOST, ROLE_TRAVELER, ROLE_USER ]  # L'admin peut tout faire
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]  # Le super admin a les droits supplémentaires pour tout gérer


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource-intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
